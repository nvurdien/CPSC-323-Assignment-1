Token:  State.KEYWORD 	Lexeme: int
<Declaration List> -> <Declaration>;
<Declaration> -> <Identifiers>
Token:  State.IDENTIFIER 	Lexeme: num
Token:  State.SEPARATOR 	Lexeme: ,
<Identifiers> -> <Identifier>, <Identifiers>
Token:  State.IDENTIFIER 	Lexeme: nu2m
Token:  State.SEPARATOR 	Lexeme: ,
<Identifiers> -> <Identifier>, <Identifiers>
Token:  State.IDENTIFIER 	Lexeme: large$
<Identifiers> -> <Identifier>
Token:  State.SEPARATOR 	Lexeme: ;
Token:  State.KEYWORD 	Lexeme: if
<If> -> if (<Condition>) <Statement> endif
Token:  State.SEPARATOR 	Lexeme: (
<Condition> -> <Expression> <Relop> <Expression>
<Expression> -> <Term><Expression Prime>;
Token:  State.IDENTIFIER 	Lexeme: num
<Term> -> <Factor><Term Prime>
<Factor> -> <Identifier>
<Term Prime> -> epsilon
<Expression Prime> -> epsilon
Token:  State.OPERATOR 	Lexeme: >
<Relop> -> >
<Expression> -> <Term><Expression Prime>;
Token:  State.IDENTIFIER 	Lexeme: nu2m
<Term> -> <Factor><Term Prime>
<Factor> -> <Identifier>
<Term Prime> -> epsilon
<Expression Prime> -> epsilon
Token:  State.SEPARATOR 	Lexeme: )
Token:  State.SEPARATOR 	Lexeme: {
<Statement> -> { <Statement_List> }
Token:  State.IDENTIFIER 	Lexeme: large
<Assign> ->  <Identifier> = <Expression>;
Token:  State.OPERATOR 	Lexeme: =
<Expression> -> <Term><Expression Prime>;
Token:  State.IDENTIFIER 	Lexeme: num
<Term> -> <Factor><Term Prime>
<Factor> -> <Identifier>
<Term Prime> -> epsilon
<Expression Prime> -> epsilon
Token:  State.SEPARATOR 	Lexeme: ;
Token:  State.SEPARATOR 	Lexeme: }
<If> -> if (<Condition>) <Statement> else <Statement> endif
Token:  State.KEYWORD 	Lexeme: else
Token:  State.SEPARATOR 	Lexeme: {
<Statement> -> { <Statement_List> }
Token:  State.IDENTIFIER 	Lexeme: large
<Assign> ->  <Identifier> = <Expression>;
Token:  State.OPERATOR 	Lexeme: =
<Expression> -> <Term><Expression Prime>;
Token:  State.IDENTIFIER 	Lexeme: nu2m
<Term> -> <Factor><Term Prime>
<Factor> -> <Identifier>
<Term Prime> -> epsilon
<Expression Prime> -> epsilon
Token:  State.SEPARATOR 	Lexeme: ;
Token:  State.SEPARATOR 	Lexeme: }
Token:  State.IDENTIFIER 	Lexeme: endif
